/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{

    INLET
    {
        // 指定类型为codeFixedValue
        type            codedFixedValue;
        // 指定边界初始值
        value           uniform (0 0 0);
        // 指定的名称标识符
        name              parabolicVelocity;

        // 编译时所需的信息，按实际需求给
        codeOptions
        #{
            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude
        #};

        codeInclude
        #{
            #include "fvCFD.H"
            #include <cmath>
            #include <iostream>
        #};

        code
        #{
            // 下面三行为标准写法，一般不用修改
            const fvPatch& boundaryPatch = patch();
            const vectorField& Cf = boundaryPatch.Cf();
            vectorField& field = *this;
            // U_0为2倍的平均速度；p_ctr为中心点偏移量；p_r为半径
            scalar U_0 = 0.01, p_ctr = 0, p_r = 0.0025;

            forAll(Cf, faceI)
            {
                field[faceI] = vector(U_0*(1-(pow(Cf[faceI].y()-p_ctr,2))/(p_r*p_r)),0,0);
            }
        #};

    }


    "(SIDE1|SIDE2)"
    {
        type            wedge;
    }

    OUTLET
    {
        type            zeroGradient;
    }

    WALL
    {
        type            noSlip;
    }


}

// ************************************************************************* //
